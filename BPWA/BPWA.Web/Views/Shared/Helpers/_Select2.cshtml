@inject IDropdownHelperService DropdownHelperService
@{
    Layout = null;
    var appClaimsJson = JsonConvert.SerializeObject(DropdownHelperService.GetAppClaims().Select(x => new { id = x.Value, text = x.Text }).ToList());
    var ticketTypesJson = JsonConvert.SerializeObject(DropdownHelperService.GetTicketTypes().Select(x => new { id = x.Value, text = x.Text }).ToList());
    var ticketStatusesJson = JsonConvert.SerializeObject(DropdownHelperService.GetTicketStatuses().Select(x => new { id = x.Value, text = x.Text }).ToList());
    var systemLanguagesJson = JsonConvert.SerializeObject(DropdownHelperService.GetSystemLanguages().Select(x => new { id = x.Value, text = x.Text }).ToList());
    var notificationTypesJson = JsonConvert.SerializeObject(DropdownHelperService.GetNotificationTypes().Select(x => new { id = x.Value, text = x.Text }).ToList());
    var notificationDistributionTypesJson = JsonConvert.SerializeObject(DropdownHelperService.GetNotificationDistributionTypes().Select(x => new { id = x.Value, text = x.Text }).ToList());
}

<script>

    function Select2NotificationTypes(options) {
        Select2({
            data: @Html.Raw(notificationTypesJson),
            placeholder: '@Translations.Select_notification_type',
            ...options
        });
    }

    function Select2NotificationDistributionTypes(options) {
        Select2({
            data: @Html.Raw(notificationDistributionTypesJson),
            placeholder: '@Translations.Select_notification_distribution_type',
            ...options
        });
    }

    function Select2SystemLanguages(options) {
        Select2({
            data: @Html.Raw(systemLanguagesJson),
            placeholder: '@Translations.Select_language',
            ...options
        });
    }

    function Select2AppClaims(options) {
        Select2({
            data: @Html.Raw(appClaimsJson),
            placeholder: '@Translations.Select_app_claim',
            ...options
        });
    }

    function Select2TicketTypes(options) {
        Select2({
            data: @Html.Raw(ticketTypesJson),
            placeholder: '@Translations.Select_ticket_type',
            ...options
        });
    }

    function Select2TicketStatuses(options) {
        Select2({
            data: @Html.Raw(ticketStatusesJson),
            placeholder: '@Translations.Select_ticket_status',
            ...options
        });
    }

    function Select2AjaxCurrentUserCompanies(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("CurrentUserCompaniesDropdown", "Account")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_company',
            ...options
        });
    }

    function Select2AjaxCurrentUserBusinessUnits(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("CurrentUserBusinessUnitsDropdown", "Account")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_business_unit',
            ...options
        });
    }

    function Select2AjaxGroups(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Groups")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.title
                };
            },
            placeholder: '@Translations.Select_group',
            ...options
        });
    }

    function Select2AjaxUsers(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Users")',
            map: (x) => {
                return {
                    id: x.id,
                    text: `${x.firstName} ${x.lastName}`
                };
            },
            placeholder: '@Translations.Select_user',
            ...options
        });
    }

    function Select2AjaxCompanies(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Companies")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_company',
            ...options
        });
    }

    function Select2AjaxBusinessUnits(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "BusinessUnits")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_business_unit',
            ...options
        });
    }

    function Select2AjaxRoles(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Roles")',
            map: (x) => {

                var name = x.name;
                if (x.company != null)
                    name += ` (${x.company.name})`;
                if (x.businessUnit != null)
                    name += ` (${x.businessUnit.name})`;

                return {
                    id: x.id,
                    text: name,
                };
            },
            placeholder: '@Translations.Select_roles',
            ...options
        });
    }

    function Select2AjaxCountries(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Countries")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_country',
            ...options
        });
    }

    function Select2AjaxCities(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Cities")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_city',
            ...options
        });
    }

    function Select2AjaxCurrencies(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Currencies")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_currency',
            ...options
        });
    }

    function Select2AjaxLanguages(options) {
        Select2Ajax({
            element: options.element,
            url: '@Url.Action("Dropdown", "Languages")',
            map: (x) => {
                return {
                    id: x.id,
                    text: x.name
                };
            },
            placeholder: '@Translations.Select_language',
            ...options
        });
    }

    function Select2(options) {
        $(options.element).select2({
            data: options.data,
            placeholder: options.placeholder,
        });

        if (options.initialValue != undefined) {
            $(options.element).val(options.initialValue).trigger('change');
        }

        $(options.element).change(function (e) {
            if (options.onChange != undefined) {
                options.onChange($(this));
            }

            if (options.onChangeCopyTextTo != undefined) {
                $(options.onChangeCopyTextTo).val($(this).select2('data')[0]['text']);
            }
        });
    }

    function Select2Ajax(options) {
        options.multiple = options.selectedItems != undefined;
        if (options.selectedItems != undefined && options.selectedItems != '') {
            options.items = JSON.parse(options.selectedItems);
        }

        $(options.element).select2({
            ajax: {
                url: options.url,
                data: options.data || function (params) {
                    return {
                        name: params.term,
                        pagination: {
                            skip: (((params.page ?? 1) - 1) * 20),
                            take: 20
                        }
                    };
                },
                processResults: function (data) {
                    return {
                        results: data.results.map(options.map),
                        pagination: {
                            more: data.pagination.more
                        }
                    };
                },
                type: 'POST',
            },
            placeholder: options.placeholder,
        });

        $(options.element).change(function (e) {
            if (options.multiple ?? false) {
                GenerateResultItems(options);
            }
            else {
                GenerateResultItem(options);
            }

            if (options.onChange != undefined) {
                options.onChange($(this));
            }

            if (options.onChangeCopyTextTo != undefined) {
                $(options.onChangeCopyTextTo).val($(this).select2('data')[0]['text']);
            }
        });

        if (options.selectedItems != undefined && options.selectedItems != '') {
            GenerateInitialResultItems(options);
        }
    }

    function GenerateResultItem(options) {
        var resultItemsWrapper = GetOrCreateResultItemsWrapper(options);
        var sourceName = $(options.element).prop('name');

        $(options.element).select2('data').forEach(function (element, index) {
            var id = `<input type='hidden' name='${sourceName}DropdownItems.id' value='${element['id']}' />`;
            var text = `<input type='hidden' name='${sourceName}DropdownItems.text' value='${element['text']}' />`;

            $(resultItemsWrapper).append(id);
            $(resultItemsWrapper).append(text);
        });
    }

    function GenerateInitialResultItems(options) {
        var resultItemsWrapper = GetOrCreateResultItemsWrapper(options);
        var sourceName = $(options.element).prop('name');

        options.items.forEach(function (element, index) {
            var id = `<input type='hidden' name='${sourceName}DropdownItems[${index}].id' value='${element['id']}' />`;
            var text = `<input type='hidden' name='${sourceName}DropdownItems[${index}].text' value='${element['text']}' />`;

            $(resultItemsWrapper).append(id);
            $(resultItemsWrapper).append(text);

            $(options.element).append(`<option value="${element['id']}" selected="selected">${element['text']}</option>`);
        });
    }

    function GenerateResultItems(options) {
        var resultItemsWrapper = GetOrCreateResultItemsWrapper(options);
        var sourceName = $(options.element).prop('name');

        $(options.element).select2('data').forEach(function (element, index) {
            var id = `<input type='hidden' name='${sourceName}DropdownItems[${index}].id' value='${element['id']}' />`;
            var text = `<input type='hidden' name='${sourceName}DropdownItems[${index}].text' value='${element['text']}' />`;

            $(resultItemsWrapper).append(id);
            $(resultItemsWrapper).append(text);
        });
    }

    function GetOrCreateResultItemsWrapper(options) {
        var form = $(options.element).closest('form')[0];
        var resultItemsWrapperId = `${options.element.replace('#', '')}_result_items_wrapper`;
        var resultItemsWrapper = $(`#${resultItemsWrapperId}`)[0];

        if (resultItemsWrapper == undefined) {
            $(form).append(`<div id='${resultItemsWrapperId}' style='display: none;'></div>`);
            resultItemsWrapper = $(`#${resultItemsWrapperId}`)[0];
        }

        $(resultItemsWrapper).html('');

        return $(resultItemsWrapper);
    }

</script>